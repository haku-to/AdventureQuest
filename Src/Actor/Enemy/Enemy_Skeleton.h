#ifndef ENEMY_SKELETON_H_
#define ENEMY_SKELETON_H_
#include "Actor/Actor.h"
#include"Actor/AnimatedMesh.h"
//スケルトンクラス
class Enemy_Skeleton :public Actor {
	enum class State {
		Idle,     //アイドル
		Walk,	  //歩き
		Turn,	  //ターン
		Damage,	  //ダメージ
		Attack,	  //アタック
		Down,	  //ダウン
		Victory,  //勝利
	};
public:
	/// <summary>
	/// コンストラクタ
	/// </summary>
	/// <param name="world">ワールド</param>
	/// <param name="position">生成時のポジション</param>
	/// <param name="angle">生成時のアングル</param>
	Enemy_Skeleton(IWorld* world, const GSvector3& position, float angle);
	//更新
	virtual void update(float delta_time)override;
	//描画
	virtual void draw()const override;
	/// <summary>
	/// 衝突リアクション
	/// </summary>
	/// <param name="other">衝突したアクター</param>
	virtual void react(Actor& other)override;

private:
	//状態更新
	void  update_state(float delta_time);
	/// <summary>
	/// 状態変化
	/// </summary>
	/// <param name="state">変化先の状態</param>
	/// <param name="motion">変化後のモーション</param>
	/// <param name="loop">モーションをループさせるか</param>
	void change_state(State state, GSuint motion, bool loop = true);
	//アイドル状態時の行動
	void idle(float delta_time);
	//歩き状態時の行動
	void walk(float delta_time);
	//ターン状態時の行動
	void turn(float delta_time);
	//攻撃状態時の行動
	void attack(float delta_time);
	//ダメージ状態時の行動
	void damage(float delta_time);
	//ダウン状態時の行動
	void down(float delta_time);
	//ターン状態か
	bool is_turn()const;
	//アタック状態か
	bool is_attack()const;
	//歩き状態か
	bool is_walk()const;
	//前向き方向のベクトルとターゲット方向のベクトルの角度差を求める
	float target_signed_angle()const;
	//ターゲット（プレイヤー）との角度を求める
	float target_angle()const;
	//ターゲット（プレイヤー）との距離を求める
	float target_distance()const;
	//フィールドとの当たり判定
	void collide_field();
	/// <summary>
	/// 他アクタとの当たり判定
	/// </summary>
	/// <param name="other">当たったアクタ</param>
	void collide_actor(Actor& other);
	//攻撃判定生成
	void generate_attack_collider();
private:
	//アニメーションメッシュ
	AnimatedMesh mesh_;
	//現在のアニメーション
	GSuint motion_;
	//ループさせるか
	bool motion_loop_;
	//状態
	State state_;
	//状態タイマー
	float state_timer_;
	//プレイヤー
	Actor* player_;
	//体力
	int health_;
};
#endif